---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Khimera Studio, disign studio ">
    <meta name="keywords" content="Khimera Studio, design studio, web design, web development, web apps, ">
		<meta name="theme-color" content="#003366" />
    <meta name="apple-mobile-web-app-status-bar-style" content="#003366" />
		<meta name="color-scheme" content="light dark"> 
		<title>Khimera Studio</title>
		<ClientRouter />
		<script>
			document.addEventListener('astro:page-load', () => {
			  const savedTheme = localStorage.getItem('theme') || 'light';
        /* const themeToggleCheckbox1= document.getElementById('chk'); */
        const themeToggleCheckbox2 = document.getElementById('chk2') as HTMLInputElement;
				if (themeToggleCheckbox2) {
					themeToggleCheckbox2.checked = savedTheme === 'dark';
				}
			});
		</script>
	</head>
	<body> 
		

		
		<slot />
	</body>
	<script defer>
	document.addEventListener('astro:page-load', () => {

  function handleClick1() {
    const container = document.getElementById('container1');
    const front = document.getElementById('front1');
    const back = document.getElementById('back1');
    if (timeoutId1) {
        clearTimeout(timeoutId1);
    }
    if (rotateCount1 %2 !== 0) {
      setTimeout(() => {
        front.classList.remove('customShadow')
        back.classList.add('customShadow')
      },300)
    } else {
      setTimeout(() => {
        front.classList.add('customShadow')
      },300)
    }
    container?.classList.add('rotate');
    container?.style.setProperty('--rotate-count', rotateCount1++);
  }
  function handleClick2() {
    const container = document.getElementById('container2');
    const front = document.getElementById('front2');
    const back = document.getElementById('back2');
    if (timeoutId2) {
        clearTimeout(timeoutId2);
    }
    if (rotateCount2 %2 !== 0) {
      setTimeout(() => {
        front.classList.remove('customShadow')
        back.classList.add('customShadow')
      },300)
    } else {
      setTimeout(() => {
        front.classList.add('customShadow')
      },300)
    }
    container?.classList.add('rotate');
    container?.style.setProperty('--rotate-count', rotateCount2++);
  }
	let rotateCount1 = 1;
  let rotateCount2 = 1;
  let timeoutId1;
  let timeoutId2;
	document.querySelectorAll('[data-flip="1"]').forEach((card) => {
		card.addEventListener('click', handleClick1);})
	document.querySelectorAll('[data-flip="2"]').forEach((card) => {
		card.addEventListener('click', handleClick2);
	})

});
</script>
<script>
  document.addEventListener('astro:page-load', () => {
		changeIcon();
		handleDialog();
	});

	function changeIcon() {
		document.querySelectorAll('.iconContainer').forEach((container) => {
			const img1 = container.querySelector('img:nth-child(1)') as HTMLElement; 
			const img2 = container.querySelector('img:nth-child(2)') as HTMLElement; 
			if (img1 && img2) {
					img1.addEventListener('touchstart', (event) => {
						img1.style.display = 'none';
						img2.style.display = 'block';
					},  {passive: true});
	
					container.addEventListener('touchend', () => {
						img1.style.display = 'block';
						img2.style.display = 'none';
					});
					img1.addEventListener('contextmenu', (event) => {
						event.preventDefault();
					});
					img2.addEventListener('contextmenu', (event) => {
						event.preventDefault();
					});
				} 
		});
	}
	
	function handleDialog() {
		for (let i = 0; i <= 11; i++) {
			const openButton = document.getElementById(`openDetails${i}`);
			const openButtonAlternative = document.getElementsByClassName(`openDetails${i}`);
			const cancelButton = document.getElementById(`closeDetails${i}`);
			const favDialog = document.getElementById(`favDialog${i}`);
			openButton?.addEventListener("click", () =>(favDialog as HTMLDialogElement)?.showModal())
			openButtonAlternative?.item(0)?.addEventListener("click", () =>(favDialog as HTMLDialogElement)?.showModal())
			cancelButton?.addEventListener("click", () =>(favDialog as HTMLDialogElement)?.close())
	
			openButton?.addEventListener("touchStart", () =>(favDialog as HTMLDialogElement)?.showModal());    
			cancelButton?.addEventListener("touchStart", () =>(favDialog as HTMLDialogElement)?.close())
		}
	}
	
</script>
<script> 
  document.addEventListener('astro:page-load', () => {
		toggleTheme();
		observeSections();
		let isMenuOpen = false;
		handleDisplayMenu(isMenuOpen) 
  });
  //let isMenuOpen = false;
	function handleDisplayMenu (isMenuOpen: boolean) {
		isMenuOpen = isMenuOpen
		const menuButton = document.getElementById('hamburger');
		menuButton?.addEventListener('click', () => {
			const menu = document.getElementById('mobileMenu');
			/* const desktopMenu = document.getElementById('desktopMenu'); */
			if (isMenuOpen) { 
				/* menu?.classList.remove('open'); */
				menu?.classList.add('mobileMenuHidden');
				isMenuOpen = false
				/* desktopMenu?.classList.remove('open'); */
			} else {/* mobileMenuHidden    mobileMenuDisplayed */
				menu?.classList.remove('mobileMenuHidden');
				isMenuOpen = true
				/* menu?.classList.add('mobileMenuDisplayed'); */
				/* desktopMenu?.classList.add('open'); */
			}
		})
	
		/* const nav = document.querySelector('#navBar') as HTMLElement; */
		const nav = document.querySelector('[data-name="navBar"]') as HTMLElement;
		let navTop = nav.offsetTop;
		let isFixed = false;
	
		function fixedNav() {
			if (window.scrollY >= navTop) {    
				nav.classList.add('fixed');
				/* if (!isFixed) {
					console.log("entro en isFIXED")
					for (let el of elementos) {
						el.classList.remove("linkFontSizeBig");
						el.classList.add("linkFontSizeSmall");
					}
				} */
				isFixed = true
			} else {
				nav.classList.remove('fixed');    
				/* if (isFixed) {
					console.log("entro en isFIXED")
					for (let el of elementos) {
	
						el.classList.remove("linkFontSizeSmall");
						el.classList.add("linkFontSizeBig");
					}
				}
				isFixed = false */
			}
		}

		const nav2 = document.querySelector('#navBarMobile') as HTMLElement;
		let navTop2 = nav2.offsetTop;
		//let isFixed2 = false;
	
		function fixedNav2() {
			if (window.scrollY >= navTop2) {    
				nav2.classList.add('fixed');
				isFixed = true
			} else {
				nav2.classList.remove('fixed');    
			}
		}
	
		window.addEventListener('scroll', fixedNav);
		window.addEventListener('scroll', fixedNav2);
	}

// change color link on scroll acordin to section  //
	function observeSections() {
		const links = document.querySelectorAll('nav a');
		const sections = document.querySelectorAll('[data-name="navLinkField"]');
		const observerGeneral = new IntersectionObserver(
			(entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						links.forEach(link => {
							link.classList.toggle(
								'active-link',
								link.getAttribute('href') === `#${entry.target.id}`
							);
						});
					}
				});
			}, 
			{ threshold: 0.55 }
		);
		
		const observerEspecifico = new IntersectionObserver(
			(entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						links.forEach(link => {
							link.classList.toggle(
								'active-link',
								link.getAttribute('href') === `#${entry.target.id}`
							);
						});
					}
				});
			}, 
			{ threshold: 0.2 }
		);
		
		sections.forEach(section => {
			if (section.id === 'OurServices') {
				observerEspecifico.observe(section);
			} else {
				observerGeneral.observe(section);
			}
		});
	}
	
function toggleTheme() {
	console.log("toggleTheme")
  /* const themeSwitch = document.getElementById('theme-toggle'); *//* theme-toggle-label */
  const themeSwitch = document.getElementsByClassName('theme-toggle-label');
  const userTheme = localStorage.getItem('theme');
  /* const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches; */
  
  const setTheme = (theme: string) => {
    document.documentElement.className = theme; 
    localStorage.setItem('theme', theme); 
  };
  
  if (userTheme) {
    setTheme(userTheme);
  }

  Array.from(themeSwitch).forEach(
		(themeSwitch) => {
			themeSwitch?.addEventListener('click', (e) => {
    const currentTheme = document.documentElement.className;
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
		})
	})
}
</script>
</html>

